{"version":3,"sources":["component/services/services.js","component/lineChart.js","component/dailyNumbers.js","App.js","reportWebVitals.js","index.js"],"names":["ApiCall","a","url","method","fetch","mode","response","json","CustomLineChart","props","xDataKey","yDataKey","xFont","yFont","yColor","console","log","CustomizedDot","cx","cy","stroke","fill","payload","data","value","selectKey","length","className","r","strokeWidth","strokeOpacity","style","position","width","height","ResponsiveContainer","LineChart","margin","top","right","left","bottom","CartesianGrid","vertical","strokeDashoffset","XAxis","dataKey","axisLine","fontSize","tickLine","dy","YAxis","orientation","interval","Tooltip","cursor","Legend","Line","type","dot","DailyNumbers","useState","selectState","setData","getDailyNumbers","response2","objToArray","Object","entries","filterArray","filter","key","arrayToObj","fromEntries","districts","keys","map","i","obj","district","state","id","total","push","useEffect","Fragment","fontWeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a60a8b77.chunk.js","sourcesContent":["export const ApiCall = async (url = '', data = {}, method) => {\n    // Default options are marked with *\n    const response = await fetch(url, {\n      method: method || 'GET', // *GET, POST, PUT, DELETE, etc.\n      mode: 'cors', // no-cors, *cors, same-origin\n    //   headers: {\n    //     'Content-Type': 'application/json'\n    //     // 'Content-Type': 'application/x-www-form-urlencoded',\n    //   },\n    //   body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n  }","import React, { PureComponent } from \"react\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  // CustomizedDot\r\n} from \"recharts\";\r\n\r\nexport const CustomLineChart = (props) => {\r\n  const {xDataKey, yDataKey, xFont=15, yFont=15, yColor=\"red\"} = {...props}\r\n  console.log(\"props:\", props)\r\n  const CustomizedDot = (props) => {\r\n    const { cx, cy, stroke, fill, payload, value, data, selectKey=\"id\" } = { ...props };\r\n    // if (payload.visible) {\r\n    if (payload[selectKey] == data.length) {\r\n      return (\r\n        <circle\r\n          className=\"circle-highligter\"\r\n          cx={cx}\r\n          cy={cy}\r\n          r={6}\r\n          stroke={stroke}\r\n          strokeWidth={10}\r\n          fill={fill}\r\n          strokeOpacity= \"0.7\"\r\n          style={{position:\"relative\"}}\r\n          >\r\n          </circle>\r\n      );\r\n    } else {\r\n      return(\"\")\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: props.width||\"100%\", height: props.height||\"200px\" }}>\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <LineChart\r\n          width={1000}\r\n          height={300}\r\n          data={props.data}\r\n          margin={{\r\n            top: 5,\r\n            right: 0,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid vertical={false} strokeDashoffset=\"1\" />\r\n          <XAxis dataKey={xDataKey} axisLine={false} fontSize={xFont} tickLine={false} dy={10}/>\r\n          <YAxis orientation='right' interval={0} axisLine={false} fontSize={yFont} tickLine={false}/>\r\n          <Tooltip cursor={false} />\r\n          <Legend/>\r\n          <Line\r\n            type=\"monotone\"\r\n            // strokeDasharray=\"3 3\"\r\n            dataKey={yDataKey}\r\n            stroke={yColor}\r\n            strokeWidth=\"5\"\r\n            dot={{\r\n              stroke: \"red\",\r\n              strokeWidth: 1,\r\n              r: 10,\r\n              fill: \"#e65858\",\r\n              strokeOpacity: \"0.5\",\r\n            }}\r\n            dot = {<CustomizedDot data={props.data} {...props}/>}\r\n            activeDot = {<CustomizedDot data={props.data} {...props}/>}\r\n            // dot={false}\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react'\nimport { ApiCall } from \"./services/services\"\nimport { CustomLineChart } from \"./lineChart\"\n\nexport const DailyNumbers = (props) => {\n    const [selectState, setSelectState] = useState(\"KA\")\n    const [data, setData] = useState([])\n\n    const getDailyNumbers = async () => {\n        try {\n            let response = await ApiCall(\"https://api.covid19india.org/v4/min/timeseries.min.json\")\n            console.log(\"response for line chart:\", response)\n            let response2 = await ApiCall(\"https://api.covid19india.org/v4/min/data.min.json\")\n            const objToArray = Object.entries(response2)\n            const filterArray = objToArray.filter(([key, value]) => key == selectState)\n            const arrayToObj = Object.fromEntries(filterArray)\n            console.log(\"filtered array:\", arrayToObj[selectState].districts)\n            let districts = arrayToObj[selectState].districts\n            let data = []\n            Object.keys(arrayToObj[selectState].districts).map((key, i) => {\n                let obj = {\n                    district: key,\n                    state: selectState,\n                    id: i + 1,\n                    ...arrayToObj[selectState].districts[key].total\n                }\n                data.push(obj)\n            })\n            console.log(\"data:\", data)\n            setData(data)\n            // let newState = Object.keys(response2).filter((key)=>{\n            //     if(key == selectState){\n            //         let array = [{...response2[key]}]\n            //         console.log(\"key:\", key, response2[key], array)\n            //         return array\n            //     }\n            //  })\n            // console.log(\"response for newState:\", newState)\n        } catch (e) {\n            console.log(\"error:\", e)\n        }\n    }\n\n    useEffect(() => {\n        getDailyNumbers()\n    }, [])\n\n    return (\n        <React.Fragment>\n            <div className=\"text-black-50 text-center py-4\" style={{fontSize:\"20px\",fontWeight:\"bold\"}}>Covid-Status</div>\n            <div className=\"d-flex justify-content-center\">\n                <CustomLineChart className=\"px-5\" data={data} xDataKey=\"district\" yDataKey=\"tested\" stroke=\"#bdaece\" fill=\"#8f4bdc\" height=\"400px\" width=\"50%\" selectKey=\"id\" xFont={12} yFont={12} yColor=\"#8f4bdc\"/>\n                <CustomLineChart data={data} xDataKey=\"district\" yDataKey=\"confirmed\" stroke=\"#e65858\" fill=\"red\" height=\"400px\" width=\"50%\" selectKey=\"id\" xFont={12} yFont={12}/>\n            </div>\n            <div className=\"d-flex justify-content-center\">\n                <CustomLineChart className=\"px-5\" data={data} xDataKey=\"district\" yDataKey=\"vaccinated\" stroke=\"#a1bed6\" fill=\"#5894c5\" height=\"400px\" width=\"50%\" selectKey=\"id\" xFont={12} yFont={12} yColor=\"#5894c5\"/>\n                <CustomLineChart data={data} xDataKey=\"district\" yDataKey=\"recovered\" stroke=\"#a0da9f\" fill=\"#339c31\" height=\"400px\" width=\"50%\" selectKey=\"id\" xFont={12} yFont={12} yColor=\"#339c31\" />\n            </div>\n        </React.Fragment>\n    )\n}","import React, { PureComponent } from \"react\";\nimport {DailyNumbers} from \"./component/dailyNumbers\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nconst data = [\n  {\n    name: \"A\",\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n    id: 1\n  },\n  {\n    name: \"B\",\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n    id: 2\n  },\n  {\n    name: \"C\",\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n    id: 3\n  },\n  {\n    name: \"D\",\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n    id: 4\n  },\n  {\n    name: \"E\",\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n    id: 5\n  },\n  {\n    name: \"F\",\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n    id: 6\n  },\n  {\n    name: \"G\",\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n    id: 7\n  },\n];\n\n\nexport const App = () => {\n  return(\n    <DailyNumbers/>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}